import { User } from "../../domain/entities/User";
import { UserRepository } from "../../domain/UserRepository";
import { IEncryptPasswordService } from "../../domain/services/IEncryptPasswordService";

export class RegisterUserUseCase {
    constructor(
        readonly userRepository: UserRepository,
        readonly encryptService: IEncryptPasswordService
    ) {}

    async run(
        email: string,
        password: string,
        name: string | null,
        last_name: string | null
    ): Promise<User | null> {
        try {
            // Check if user already exists (optional, repository could handle unique constraint)
            const existingUser = await this.userRepository.getUserByEmail(email);
            if (existingUser) {
                // Maybe throw a specific error or return null indicating conflict
                console.error("User with this email already exists.");
                return null;
            }

            const encodedPassword = await this.encryptService.encodePassword(password);

            // Create a User object, ID will be assigned by DB/Repository
            // Pass null or '' for ID initially, repo handles it
            const userObject = new User(
                '', // ID will be generated by DB
                email,
                encodedPassword,
                name,
                last_name
            );


            const user = await this.userRepository.registerUser(userObject);
            return user;
        } catch (error) {
            // Log the error for debugging purposes
            console.error("Error in RegisterUserUseCase:", error);
            return null;
        }
    }
}