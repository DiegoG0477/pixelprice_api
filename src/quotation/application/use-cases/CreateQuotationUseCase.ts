// quotation/application/use-cases/CreateQuotationUseCase.ts
import { Quotation } from "../../domain/entities/Quotation";
import { QuotationRepository } from "../../domain/QuotationRepository";
import { IGeminiQuotationService, QuotationInputData } from "../services/IGeminiQuotationService";
import { INotificationService } from "../services/INotificationService";
import { GetUserByIdUseCase } from "../../../user/application/use-cases/GetUserByIdUseCase";
// import { IDocxGeneratorService } from "../services/IDocxGeneratorService"; // Not needed here for generating DOCX on creation

export class CreateQuotationUseCase {
    constructor(
        private quotationRepository: QuotationRepository,
        private geminiService: IGeminiQuotationService,
        private notificationService: INotificationService,
        private getUserByIdUseCase: GetUserByIdUseCase
        // private docxService: IDocxGeneratorService // Inject if DOCX was generated/saved here
    ) {}

    async run(
        userId: string,
        name: string,
        description: string,
        capital: number | null,
        isSelfMade: boolean,
        mockupImage: { mimeType: string; data: Buffer } | null // Pass image data
    ): Promise<Quotation | null> {

        try {
            console.log(`Starting quotation generation for user ${userId}, project: ${name}`);

            const user = await this.getUserByIdUseCase.run(userId);

            let username = ""

            if(user){
                username = user.name ? user.name : "";
            }

            // 1. Prepare input for Gemini Service
            const geminiInput: QuotationInputData = {
                name,
                description,
                capital: capital ?? undefined, // Pass capital if provided
                isSelfMade,
                mockupImage: mockupImage ?? undefined, // Pass image if provided
            };

            // 2. Call Gemini Service to generate the report text
            // This is the potentially long-running step
            const quotationText = await this.geminiService.generateQuotationReport(geminiInput, username);
            console.log(`Gemini generated report text for project: ${name}`);

            // (Optional Step: Generate DOCX here if we were saving it immediately)
            // const docxBuffer = await this.docxService.generateQuotationDocx(reportText, name);
            // const docxPath = await saveDocxToServer(docxBuffer, userId, name); // Needs implementation

            // 3. Create Quotation entity
            const quotationObject = new Quotation(
                '', // ID generated by DB
                userId,
                name,
                quotationText // Store the full text from Gemini
                // docxPath // Store path if DOCX was generated and saved
                // createdAt handled by DB
            );

            // 4. Save Quotation to Database
            const createdQuotation = await this.quotationRepository.createQuotation(quotationObject);

            if (!createdQuotation) {
                console.error(`Failed to save quotation to database for project: ${name}, user: ${userId}`);
                // Decide if we should still attempt notification? Probably not.
                return null;
            }
            console.log(`Quotation saved successfully to DB. ID: ${createdQuotation.id}`);


            // 5. Send Push Notification (Fire-and-forget or await with logging)
            try {
                const notificationSent = await this.notificationService.sendNewQuotationNotification(createdQuotation);
                if (!notificationSent) {
                    console.warn(`Failed to send FCM notification for quotation ID: ${createdQuotation.id} to user ID: ${createdQuotation.userId}`);
                } else {
                    console.log(`FCM notification sent successfully for quotation ID: ${createdQuotation.id}`);
                }
            } catch (notificationError) {
                 console.error(`Error sending FCM notification for quotation ID: ${createdQuotation.id}`, notificationError);
                 // Log but don't fail the overall operation as quotation is saved.
            }

            return createdQuotation;

        } catch (error) {
            console.error(`Error in CreateQuotationUseCase for user ${userId}, project ${name}:`, error);
            // TODO: Implement more specific error handling (e.g., Gemini API errors vs DB errors)
            return null;
        }
    }
}